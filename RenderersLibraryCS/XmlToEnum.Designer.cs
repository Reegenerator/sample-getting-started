// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator
// Generator: RgenTemplate (internal)
// Generation date: 2014-01-15 02:55
// Generated by: Win81vm\Admin
// -------------------------------------------------------
namespace RenderersLibraryCS
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reegenerator", "2.0.5.0")]
    [Kodeo.Reegenerator.Generators.TemplateDisplayAttribute(DisplayName="XmlToEnum", Description="XmlToEnum", HideInDialog=false)]
    public partial class XmlToEnum : Kodeo.Reegenerator.Generators.CodeRenderer
    {
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<returns></returns>
        public override Kodeo.Reegenerator.Generators.RenderResults Render()
        {
            Output.Write("// -------------------------------------------------------\r\n// Automatically gene" +
                    "rated with Kodeo\'s Reegenerator\r\n// Generator: XmlToEnum\r\n// Generation date: ");
            Output.Write( System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") );
            Output.Write("\r\n// Generated by: ");
            Output.Write( System.Security.Principal.WindowsIdentity.GetCurrent().Name );
            Output.Write("\r\n// -------------------------------------------------------\r\n\r\npartial class ");
            Output.Write( _className );
            Output.Write("  {\r\n\tenum Days {\r\n");
 
var isFirst = true;
foreach (var dayElement in _xdoc.Root.Elements("Day")) {
		//Only write comma and newline before the second enum member
		if (!isFirst) {
			Output.Write(",\r\n");            
		}
		//Write enum member (preceeded by 2 tab characters)
	
            Output.Write("\t\t");
            Output.Write( dayElement.Value);

			
		//Write first value only once, after the following the first member name
		if (isFirst) {
			if (_firstValue != 0 ) Output.Write("= " + _firstValue.ToString());
		}
				
		isFirst = false;
}

            Output.Write("\r\n\t}\r\n}");
            Output.WriteLine();
            return new Kodeo.Reegenerator.Generators.RenderResults(this.Output.ToString());
        }
    }
}
